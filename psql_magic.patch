diff --git a/src/bin/psql/Makefile b/src/bin/psql/Makefile
index f1336d5..8d09b98 100644
--- a/src/bin/psql/Makefile
+++ b/src/bin/psql/Makefile
@@ -23,7 +23,7 @@ override CPPFLAGS := -I. -I$(srcdir) -I$(libpq_srcdir) -I$(top_srcdir)/src/bin/p
 OBJS=	command.o common.o help.o input.o stringutils.o mainloop.o copy.o \
 	startup.o prompt.o variables.o large_obj.o print.o describe.o \
 	tab-complete.o mbprint.o dumputils.o keywords.o kwlookup.o \
-	sql_help.o \
+	sql_help.o psql_magic.o \
 	$(WIN32RES)
 
 
diff --git a/src/bin/psql/command.c b/src/bin/psql/command.c
index 19ac065..40afb27 100644
--- a/src/bin/psql/command.c
+++ b/src/bin/psql/command.c
@@ -48,6 +48,7 @@
 #include "psqlscan.h"
 #include "settings.h"
 #include "variables.h"
+#include "psql_magic.h"
 
 
 /* functions for use in this file */
@@ -1550,6 +1551,60 @@ exec_command(const char *cmd,
 			slashUsage(pset.popt.topt.pager);
 	}
 
+   /* \* -- psql_magic */
+   else if (strcmp(cmd, "*") == 0) {
+		char *cmd_params = psql_scan_slash_option(scan_state, OT_WHOLE_LINE, NULL, false);
+		char *table_name = NULL;
+		char *sql = NULL;
+		char **tokens = NULL;
+		int i;
+		PQExpBuffer history_buf;
+
+		// if not overwritten will send the buffer for execution
+		status = PSQL_CMD_ERROR;
+
+		if (cmd_params != NULL) {
+
+			tokens = string_to_tokens(cmd_params);
+			if (tokens) {
+				table_name = search_table_by_abbr(tokens[0]);
+
+				if (table_name)
+				{
+					strcpy(tokens[0], table_name);
+					sql = tokens_to_sql(tokens);
+
+					if (sql) {
+						printf("%s\n", sql);    //show generated sql on console
+
+						// for history
+						history_buf = createPQExpBuffer();
+						pg_append_history(sql, history_buf);
+						pg_send_history(history_buf);
+						resetPQExpBuffer(history_buf);
+
+						// for execution
+						resetPQExpBuffer(query_buf);
+						appendPQExpBufferStr(query_buf, sql);
+
+						// free memory
+						for (i = 0; i < PM_MAX_TOKENS; i++) {
+							free(tokens[i]);
+						}
+						free(tokens);
+						free(sql);
+					}
+					free(table_name);
+					status = PSQL_CMD_SEND;
+				}
+			}
+			free(cmd_params);
+		}
+		else {
+			print_magic_help();
+		}
+   }
+
 #if 0
 
 	/*
diff --git a/src/bin/psql/psql_magic.c b/src/bin/psql/psql_magic.c
new file mode 100644
index 0000000..710b8a3
--- /dev/null
+++ b/src/bin/psql/psql_magic.c
@@ -0,0 +1,494 @@
+#include "postgres_fe.h"
+
+#include <ctype.h>
+#include "libpq-fe.h"
+#include "pqexpbuffer.h"
+#include "settings.h"
+#include "stringutils.h"
+#include "common.h"
+#include "psql_magic.h"
+
+
+// filled when search for table succeeds
+char *current_oid = NULL;
+
+// prototypes
+char *get_current_oid(void);
+char *find_column_by_patterns(char *table_name, const char *patterns);
+char *get_pk_as_text_by_oid(char *oid);
+int get_default_limit(void);
+char *get_table(char *table_name);
+char *get_table_with_limit(char *table_name, char *limit);
+char *get_table_order(char *table_name, char *order_by_column, int order_by);
+char *get_table_order_limit(char *table_name, char *order_by_column, int ob_direction, char *limit);
+char *get_table_by_column_value(char *table_name, char *column_name, char *column_value, char wildcard_option);
+const char *get_created_column_patterns(void);
+const char *get_modified_column_patterns(void);
+int get_default_order_by_direction(void);
+char *quote_string_if_not_quoted(char *input_string);
+char *do_process_tokens(char** tokens, int tokencount);
+
+void print_magic_help() {
+	printf("\npsql_magic usage 1: \"\\* table_pattern [o|od|oa|oc|oca|ocd|om|oma|omd] [lX]\"\n\n");
+	printf("\ttable_pattern - \"*\" can be used for wildcards. full table names (with schema) will be searched\n");
+	printf("\t[o|od|oa|oc|oca|ocd|om|oma|omd] - optional order by clause\n");
+	printf("\t\twhere:\n");
+	printf("\t\t[o]-> order by PK. sort direction determined by .psqlrc variable psql_magic_default_order_by_direction\n");
+	printf("\t\t[c|m] -> [created|modified]. column patterns defined by psql_magic_created_column_patterns variable \n");
+	printf("\t\t[a|d] -> [asc|desc]. column patterns defined by psql_magic_created_column_patterns variable \n");
+	printf("\t[lX] - optional \"limit X\" clause. if not specified default \"limit\" defined by psql_magic_default_row_limit wil be used\n");
+
+    printf("\npsql_magic usage 2: \"\\* table_pattern w[l(ike)|i(like)|here] column_pattern column_value\"\n\n");
+	printf("\ttable_pattern - \"*\" can be used for wildcards. full table names (with schema) will be searched\n");
+	printf("\tcolumn_pattern - \"*\" can be used for wildcards\n");
+    printf("\tcolumn_value - quotes will be added automatically. when using like/ilike \"%\"-s should be used\n");
+
+}
+
+char *get_current_oid() {
+	return current_oid;
+}
+
+char *
+search_table_by_abbr(const char *pattern) {
+	PQExpBufferData buf;
+	PGresult *res;
+	int i;
+	char *ret;
+
+	initPQExpBuffer(&buf);
+	printfPQExpBuffer(&buf,
+		"SELECT full_name, oid\n"
+		"FROM (\n"
+		"	SELECT c.oid, quote_ident(n.nspname)||'.'||quote_ident(c.relname) AS full_name\n"
+		"	FROM pg_class c join pg_namespace n on n.oid = c.relnamespace\n"
+        "   WHERE relkind in ('r', 'v', 'm', 'f')\n"
+        "   AND n.nspname != 'information_schema'\n"
+		"   ORDER BY length(quote_ident(n.nspname)||'.'||quote_ident(c.relname))) a\n"
+        "WHERE full_name ILIKE '%%%s%%'\n"
+		, pattern);
+
+	res = PSQLexec(buf.data);
+	termPQExpBuffer(&buf);
+	if (!res)
+		return NULL;
+
+	if (PQntuples(res) == 0) {
+		if (!pset.quiet)
+			psql_error("Did not find any relations for pattern \"%%%s%%\".\n",
+			pattern);
+		PQclear(res);
+		return NULL;
+	}
+
+	if (PQntuples(res) > 1) {
+		int use1st = GetVariableNum(pset.vars, "psql_magic_use_1st_on_duplicate", 0, 0, false);
+		psql_error("Warning - more than 1 matches for pattern \"%%%s%%\".\n", pattern);
+
+		for (i = 0; i < PQntuples(res); i++) {
+			const char *full_name;
+
+			full_name = PQgetvalue(res, i, 0);
+			psql_error("%s\n", full_name);
+
+		}
+		if (!use1st) {
+			PQclear(res);
+			return NULL;
+		}
+	}
+
+	if (current_oid)
+		free(current_oid);
+	current_oid = pg_malloc(strlen(PQgetvalue(res, 0, 1)) + 1);
+	strcpy(current_oid, PQgetvalue(res, 0, 1));
+
+	ret = pg_malloc(strlen(PQgetvalue(res, 0, 0)) + 1);
+	strcpy(ret, PQgetvalue(res, 0, 0));
+
+	PQclear(res);
+
+	return ret;
+}
+
+char *
+find_column_by_patterns(char *table_name, const char *patterns) {
+	PQExpBufferData buf;
+	PGresult *res;
+	int i = 1;
+	char *ret, *patterns_copy;
+	char *current_pattern;
+	char pattern_arr[100];
+	char temp_str[100];
+	patterns_copy = pg_malloc(strlen(patterns) + 1); //needed as strtok changes input string
+	strcpy(patterns_copy, patterns);
+
+	pattern_arr[0] = '\0';
+	do {
+		if (pattern_arr[0] == '\0')
+			current_pattern = strtokx(patterns_copy, "", ",", NULL, 0, false, false, pset.encoding);
+		else
+			current_pattern = strtokx(NULL, "", ",", NULL, 0, false, false, pset.encoding);
+		if (current_pattern != NULL && current_pattern[0] != ',') {
+			snprintf(temp_str, sizeof (temp_str), "\'%%%s%%\'", current_pattern);
+			if (pattern_arr[0] != '\0')
+				strcat(pattern_arr, ",");
+			strcat(pattern_arr, temp_str);
+		}
+	} while (current_pattern != NULL);
+	free(patterns_copy);
+
+	initPQExpBuffer(&buf);
+	printfPQExpBuffer(&buf,
+		"SELECT column_name\n"
+		"FROM information_schema.columns\n"
+		"WHERE quote_ident(table_schema)||'.'||quote_ident(table_name) = '%s'\n"
+		"AND column_name LIKE ANY (array[%s])\n"
+		"ORDER BY ordinal_position\n",
+		table_name, pattern_arr);
+
+	res = PSQLexec(buf.data);
+	termPQExpBuffer(&buf);
+	if (!res)
+		return NULL;
+
+	if (PQntuples(res) == 0) {
+		if (!pset.quiet)
+			psql_error("No columns found for pattern\n");
+		PQclear(res);
+		return NULL;
+	} else if (PQntuples(res) > 1) {
+		if (!pset.quiet)
+			psql_error("Warning - multiple columns found for pattern, using ordinal 1st\n");
+		for (i = 0; i < PQntuples(res); i++) {
+			psql_error("%s\n", PQgetvalue(res, i, 0));
+		}
+	}
+
+	ret = pg_malloc(strlen(PQgetvalue(res, 0, 0)) + 1);
+	strcpy(ret, PQgetvalue(res, 0, 0));
+
+	PQclear(res);
+	return ret;
+}
+
+char *get_pk_as_text_by_oid(char *oid) {
+	PQExpBufferData buf;
+	PGresult *res;
+	char *ret;
+	char *temp;
+
+	initPQExpBuffer(&buf);
+	printfPQExpBuffer(&buf,
+		"SELECT pg_catalog.pg_get_constraintdef(con.oid, true)\n"
+		"FROM\n"
+		"  pg_catalog.pg_class c,\n"
+		"  pg_catalog.pg_index i\n"
+		"  JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype = 'p')\n"
+		"WHERE c.oid = %s\n"
+		"  AND c.oid = i.indrelid\n"
+		"  AND i.indisprimary;\n",
+		oid);
+
+	res = PSQLexec(buf.data);
+	termPQExpBuffer(&buf);
+	if (!res)
+		return NULL;
+
+	if (PQntuples(res) == 0) // Table has no PK
+	{
+		PQclear(res);
+		return NULL;
+	}
+
+	temp = PQgetvalue(res, 0, 0);
+	ret = pg_malloc(strlen(temp) - strlen("PRIMARY KEY ("));
+	/* temp will be zB:
+	 * "PRIMARY KEY (c1)", "PRIMARY KEY (c1, c2)"
+	 */
+	strcpy(ret, (char *) temp + strlen("PRIMARY KEY ("));
+	ret[strlen(ret) - 1] = '\0';
+	PQclear(res);
+
+	return ret;
+}
+
+int
+get_default_limit() {
+	return GetVariableNum(pset.vars, "psql_magic_default_row_limit", 5, 5, false);
+}
+
+char *
+get_table(char *table_name) {
+	char *ret_sql = pg_malloc(PM_MAX_STATEMENT_CHARS);
+
+	snprintf(ret_sql, PM_MAX_STATEMENT_CHARS, "SELECT * FROM %s LIMIT %d;", table_name, get_default_limit());
+
+	return ret_sql;
+}
+
+char *
+get_table_with_limit(char *table_name, char *limit) {
+	char *ret_sql = pg_malloc(PM_MAX_STATEMENT_CHARS);
+
+	snprintf(ret_sql, PM_MAX_STATEMENT_CHARS, "SELECT * FROM %s LIMIT %s;", table_name, limit);
+
+	return ret_sql;
+}
+
+char *
+get_table_order(char *table_name, char *order_by_column, int order_by) {
+	char *ret_sql = pg_malloc(PM_MAX_STATEMENT_CHARS);
+	char *order_by_str = order_by == 0 ? "" : "DESC";
+
+	snprintf(ret_sql, PM_MAX_STATEMENT_CHARS, "SELECT * FROM %s ORDER BY %s %s LIMIT %d;",
+		table_name, order_by_column, order_by_str, get_default_limit());
+
+	return ret_sql;
+}
+
+char *
+get_table_order_limit(char *table_name, char *order_by_column, int ob_direction, char *limit) {
+	char *ret_sql = pg_malloc(PM_MAX_STATEMENT_CHARS);
+	char *ob_direction_str = ob_direction ? "DESC" : "";
+
+	snprintf(ret_sql, PM_MAX_STATEMENT_CHARS, "SELECT * FROM %s ORDER BY %s %s LIMIT %s;",
+		table_name, order_by_column, ob_direction_str, limit);
+
+	return ret_sql;
+}
+
+char *
+get_table_by_column_value(char *table_name, char *column_name, char *column_value, char wildcard_option) {
+	char *ret_sql = pg_malloc(PM_MAX_STATEMENT_CHARS);
+
+    if (wildcard_option == 'n')
+        snprintf(ret_sql, PM_MAX_STATEMENT_CHARS, "SELECT * FROM %s WHERE %s = %s LIMIT %d;",
+            table_name, column_name, column_value, get_default_limit());
+    else if ((wildcard_option == 'l') )
+        snprintf(ret_sql, PM_MAX_STATEMENT_CHARS, "SELECT * FROM %s WHERE %s LIKE %s LIMIT %d;",
+            table_name, column_name, column_value, get_default_limit());
+    else if ((wildcard_option == 'i') )
+        snprintf(ret_sql, PM_MAX_STATEMENT_CHARS, "SELECT * FROM %s WHERE %s ILIKE %s LIMIT %d;",
+            table_name, column_name, column_value, get_default_limit());
+
+	return ret_sql;
+}
+
+const char *
+get_created_column_patterns() {
+	const char *created_columns = GetVariable(pset.vars, "psql_magic_created_column_patterns");
+
+	if (created_columns == NULL)
+		return "created";
+
+	return created_columns;
+}
+
+const char *
+get_modified_column_patterns() {
+	const char *modified_columns = GetVariable(pset.vars, "psql_magic_modified_column_patterns");
+
+	if (modified_columns == NULL)
+		return "modified";
+
+	return modified_columns;
+}
+
+int
+get_default_order_by_direction() {
+	// 1 = DESC, 0 = ASC
+	return GetVariableNum(pset.vars, "psql_magic_default_order_by_direction", 1, 1, false);
+}
+
+char *
+quote_string_if_not_quoted(char *input_string) {
+	char *ret_str;
+
+	if (input_string[0] == '\'') //already quoted, just copy
+	{
+		ret_str = malloc(strlen(input_string) + 1);
+		strcpy(ret_str, input_string);
+	} else {
+		ret_str = malloc(strlen(input_string) + 3);
+		sprintf(ret_str, "'%s'", input_string);
+	}
+	return ret_str;
+}
+
+char *
+do_process_tokens(char** tokens, int tokencount) {
+	char *ret = NULL, *table_token = NULL, *ob_token = NULL, *limit_token = NULL;
+	char *order_by_column = NULL, *limit_value = NULL, *id_column = NULL, *id_value = NULL;
+    char order_by_char = ' ', order_col_char = ' ', ob_c1, ob_c2, ob_c3;
+    char wildcard_option = 'n'; /* n - no, l - like, i - ilike */
+    int order_by_direction = 0;
+
+	/* tbl_pattern only */
+	if (tokencount == 1) {
+		return get_table(tokens[0]);
+	}
+
+	table_token = tokens[0];
+	/* tbl_pattern + [order] or [limit] */
+	if (tokencount == 2) {
+		if (tokens[1][0] == 'l')// [lXX]
+			limit_token = tokens[1];
+		else
+			ob_token = tokens[1];
+	} else if (tokencount == 3) {
+		if (tokens[1][0] == 'l') { // [lXX]
+			limit_token = tokens[1];
+			ob_token = tokens[2];
+		} else {
+			ob_token = tokens[1];
+			limit_token = tokens[2];
+		}
+	} else if (tokencount == 4 && tokens[1][0] == 'w') { // tbl w id_pattern id_val
+		id_column = tokens[2];
+		id_value = tokens[3];
+        if (tokens[1][1] == 'l')
+            wildcard_option = 'l';
+        else if (tokens[1][1] == 'i')
+            wildcard_option = 'i';
+    } else {
+		printf("invalid \\* syntax!\n");
+		print_magic_help();
+	}
+
+
+	if (limit_token) {
+		//        printf("limit_token: %s\n", limit_token);
+		limit_value = pg_malloc(strlen(limit_token));
+		strcpy(limit_value, (char*) (limit_token + 1));
+	}
+
+	if (ob_token) {
+		int ob_token_len = strlen(ob_token);
+
+		ob_c1 = ob_token[0];
+		if (ob_token_len > 1) {
+			ob_c2 = ob_token[1];
+			if (ob_c2 == 'a' || ob_c2 == 'd')
+				order_by_char = ob_c2;
+			else
+				order_col_char = ob_c2;
+		}
+		if (ob_token_len == 3) {
+			ob_c3 = ob_token[2];
+			order_by_char = ob_c3;
+		}
+
+		if (order_by_char == ' ')
+			order_by_direction = get_default_order_by_direction();
+		else if (order_by_char == 'a')
+			order_by_direction = 0;
+		else if (order_by_char == 'd')
+			order_by_direction = 1;
+
+		// [o|od|oa|oc|oca|ocd|om|oma|omd]
+		if (ob_c1 == 'o') {
+			if (order_col_char == ' ') {
+				order_by_column = get_pk_as_text_by_oid(get_current_oid());
+				if (order_by_column == NULL) {
+					psql_error("couldn't determine PK for %s\n", table_token);
+					return NULL;
+				}
+			} else if (ob_token_len > 1 && order_col_char == 'c') {
+				const char *column_patterns = get_created_column_patterns();
+				order_by_column = find_column_by_patterns(table_token, column_patterns);
+				if (order_by_column == NULL)
+					return NULL;
+			} else if (ob_token_len > 1 && order_col_char == 'm') {
+				const char *column_patterns = get_modified_column_patterns();
+				order_by_column = find_column_by_patterns(table_token, column_patterns);
+				if (order_by_column == NULL)
+					return NULL;
+			}
+
+		} else {
+			psql_error("invalid \"order by\" abbreviation, should start with \"o\"...\n");
+			return NULL;
+		}
+	}
+
+	if (id_column) {
+		char *id_column_full, *id_value_full;
+		id_column_full = find_column_by_patterns(table_token, id_column);
+		if (id_column_full == NULL)
+			return NULL;
+        id_value_full = quote_string_if_not_quoted(id_value);
+        ret = get_table_by_column_value(table_token, id_column_full, id_value_full, wildcard_option);
+		free(id_column_full);
+		free(id_value_full);
+	}
+
+	if (ob_token && !limit_token) {
+		ret = get_table_order(table_token, order_by_column, order_by_direction);
+		free(order_by_column);
+	} else if (limit_token && !ob_token) {
+		ret = get_table_with_limit(table_token, limit_value);
+		free(limit_value);
+	}/* pattern + order + limit */
+	else if (ob_token && limit_token) {
+		ret = get_table_order_limit(table_token, order_by_column, order_by_direction, limit_value);
+		free(limit_value);
+		free(order_by_column);
+	}
+
+	return ret;
+}
+
+char **
+string_to_tokens(char* token_str) {
+	char *token;
+	char **tokens;
+
+	const char *whitespace = " \t\n\r";
+	int _token_count = 0;
+	int i;
+
+	token = strtokx(token_str, whitespace, "", "\"",
+		0, false, false, pset.encoding);
+
+	tokens = pg_malloc(PM_MAX_TOKENS * sizeof (char*));
+	for (i = 0; i < PM_MAX_TOKENS; i++) {
+		tokens[i] = pg_malloc(256);
+		tokens[i][0] = '\0';
+	}
+
+	strcpy(tokens[_token_count++], token);
+
+	do {
+		token = strtokx(NULL, whitespace, "", "\"",
+			0, false, false, pset.encoding);
+		if (token) {
+			if (_token_count == PM_MAX_TOKENS) {
+				printf("Too many input tokens!");
+				print_magic_help();
+				return NULL;
+			}
+			strcpy(tokens[_token_count++], token);
+		}
+
+	} while (token);
+
+	// replace * with % for 1st token
+	for (i = 0; i < strlen(tokens[0]); i++)
+		if (tokens[0][i] == '*')
+			tokens[0][i] = '%';
+
+	return tokens;
+}
+
+char *
+tokens_to_sql(char **tokens) {
+	char *expanded_sql;
+	int tokencount = 0;
+	while (tokencount < PM_MAX_TOKENS && tokens[tokencount][0] != (char) '\0')
+		tokencount++;
+
+	expanded_sql = do_process_tokens(tokens, tokencount);
+
+	return expanded_sql;
+}
diff --git a/src/bin/psql/psql_magic.h b/src/bin/psql/psql_magic.h
new file mode 100644
index 0000000..f6361ce
--- /dev/null
+++ b/src/bin/psql/psql_magic.h
@@ -0,0 +1,30 @@
+/*
+ * psql_magic - conventions based "auto-complete" for better data-skimming
+ *
+ * these rows should be customized and added to .psqlrc
+\set psql_magic_default_row_limit 1
+\set psql_magic_default_order_by_direction 1
+\set psql_magic_use_1st_on_duplicate 1
+\set psql_magic_created_column_patterns created,timestamp
+\set psql_magic_modified_column_patterns modified,updated,timestamp
+ */
+
+#ifndef PSQL_MAGIC_H
+#define PSQL_MAGIC_H
+
+#define PM_MAX_TOKENS 4
+#define PM_MAX_STATEMENT_CHARS 256
+
+extern void
+print_magic_help(void);
+
+extern char **
+string_to_tokens(char* token_str);
+
+extern char *
+search_table_by_abbr(const char *abbr);
+
+extern char *
+tokens_to_sql(char **tokens);
+
+#endif
